package service.receive;

import model.ExternalPlayer;
import model.InternalPlayer;

import java.util.Objects;
import java.util.Random;


/** Initial player definition works by choosing the player with the greater number generated randomly
 */
public class InitialPlayerDefinitionService {
    private final InternalPlayer internalPlayer;
    private final ExternalPlayer externalPlayer;

    public InitialPlayerDefinitionService() {
        this.internalPlayer = InternalPlayer.getInstance();
        this.externalPlayer = ExternalPlayer.getInstance();
    }

    public Integer generateRandomNumber() {
        Random random = new Random();
        return random.nextInt(1, 1000);
    }

    public void setExternalPlayerRandomNumber(Integer externalPlayerRandomNumber) {
        externalPlayer.setExternalPlayerRandomNumber(externalPlayerRandomNumber);
    }

    /**
     * Decide the first player based on the random number generated by the users. If the number is equal, the number of the first player will be
     * generated again until it's different from the external player.
     */
    public void decideInitialPlayer() {
        if (Objects.isNull(internalPlayer.initGameNumber)) {
            System.out.println("Internal player is null");
            return;
        }
        if (internalPlayer.initGameNumber > externalPlayer.initGameNumber) {
            setInternalPlayerAsCurrent();
            System.out.println("Internal player number " + internalPlayer.initGameNumber +  " is greater than external player number " + externalPlayer.initGameNumber);
        } else if (internalPlayer.initGameNumber.equals(externalPlayer.initGameNumber)) {
            handleEqualNumbers(externalPlayer.initGameNumber);
        } else {
            setExternalPlayerAsCurrent();
            System.out.println("Internal player number " + internalPlayer.initGameNumber +  " is less than external player number " + externalPlayer.initGameNumber);
        }
    }

    private void setInternalPlayerAsCurrent() {
        internalPlayer.currentPlayer = true;
        externalPlayer.currentPlayer = false;
    }

    private void setExternalPlayerAsCurrent() {
        internalPlayer.currentPlayer = false;
        externalPlayer.currentPlayer = true;
    }

    private void handleEqualNumbers(Integer externalPlayerRandomNumber) {
        Integer newInternalRandomNumber;
        do {
            newInternalRandomNumber = generateRandomNumber();
        } while (Objects.equals(newInternalRandomNumber, externalPlayerRandomNumber));

        internalPlayer.initGameNumber = newInternalRandomNumber;

        if (internalPlayer.initGameNumber > externalPlayerRandomNumber) {
            setInternalPlayerAsCurrent();
            System.out.println("Internal player number " + internalPlayer.initGameNumber +  " is equal, then greater than external player number " + externalPlayerRandomNumber);
        } else {
            setExternalPlayerAsCurrent();
            System.out.println("Internal player number " + internalPlayer.initGameNumber +  " is equal, then less than external player number " + externalPlayerRandomNumber);
        }
    }
}

